#include <stdio.h>

struct process {

    int pid;  // process ID

    int arrival_time;  // arrival time of the process

    int burst_time;  // burst time of the process

    int completion_time;  // completion time of the process

    int turnaround_time;  // turnaround time of the process

    int waiting_time;  // waiting time of the process

};

int main() {

    int n, i, j;

    printf("Enter the number of processes: ");

    scanf("%d", &n);

    struct process p[n], temp;

    for (i = 0; i < n; i++) {

        printf("Enter the arrival time and burst time of process %d: ", i+1);

        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);

        p[i].pid = i+1;

    }

    for (i = 0; i < n; i++) {

        for (j = i+1; j < n; j++) {

            if (p[i].burst_time > p[j].burst_time) {

                temp = p[i];

                p[i] = p[j];

                p[j] = temp;

            }

        }

    }

    p[0].completion_time = p[0].burst_time + p[0].arrival_time;

    p[0].turnaround_time = p[0].completion_time - p[0].arrival_time;

    p[0].waiting_time = p[0].turnaround_time - p[0].burst_time;

    float total_waiting_time = p[0].waiting_time, total_turnaround_time = p[0].turnaround_time;

    printf("\nGantt Chart:\n");

    printf("P%d ", p[0].pid);

    for (i = 1; i < n; i++) {

        p[i].completion_time = p[i-1].completion_time + p[i].burst_time;

        p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;

        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;

        total_waiting_time += p[i].waiting_time;

        total_turnaround_time += p[i].turnaround_time;

        printf("P%d ", p[i].pid);

    }

    printf("\n\n");

    printf("Average Waiting Time: %.2f\n", total_waiting_time/n);

    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);

    return 0;

}

